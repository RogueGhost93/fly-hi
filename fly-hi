#!/bin/bash
set -euo pipefail

install_location=<install_location>
dc_media="docker compose -f ${install_location}/media/docker-compose.yaml"
dc_starrs="docker compose -f ${install_location}/starrs/docker-compose.yaml"
dc_network="docker compose -f ${install_location}/network/docker-compose.yaml"
dc_management="docker compose -f ${install_location}/management/docker-compose.yaml"
option=${1:-"help"}
compose_file=${2:-""}
container=${3:-""}
help() {
   echo "Fly-Hi Media"
   echo
   echo "Usage: fly-hi [help|option] [compose-file]"
   echo "options:"
   echo "help        displays this help message"
   echo "restart     restarts Fly-Hi services"
   echo "stop        stops all Fly-Hi services"
   echo "start       starts Fly-Hi services"
   echo "update      updates Fly-Hi services"
   echo "destroy     destroy Fly-Hi services but preserve container data"
   echo "uninstall   completely remove all containers and their data from the system"
   echo "ip          checks if the VPN is working as expected"
   echo "ports       shows all ports currently used and opened by docker containers"
   echo "links       shows links to access your services"
   echo "vpn         Manage your VPN server" #private_vpn#
}

send_success_message() {
    echo -e $(printf "\e[32m$1\e[0m")
}

send_error_message() {
    echo -e $(printf "\e[31m$1\e[0m")
    exit 255
}
send_message_in_blue() {
    echo -e "\e[34m$1\e[0m"
}


if [ $option == "help" ]; then
    help
    exit 0
fi
if [ $option == "ports" ]; then
        docker ps --format '{{.Names}}\t{{.Ports}}'
fi

if [ $option == "restart" ]; then
    if [ -z "$compose_file" ]; then
        $dc_management stop && $dc_management up -d
        $dc_network stop && $dc_network up -d
        $dc_media stop && $dc_media up -d
        $dc_starrs stop && $dc_starrs up -d
    else
        case $compose_file in
            "media")
                $dc_media stop && $dc_media up -d
                ;;
            "starrs")
                $dc_starrs stop && $dc_starrs rm -f qbittorrent && $dc_starrs rm -f qbittorrentpub && $dc_starrs up -d
                ;;
            "network")
                $dc_network stop && $dc_network up -d
                ;;
            "management")
                $dc_management stop && $dc_management up -d
                ;;
            "$compose_file")
                docker restart $compose_file
                ;;
            *)
                send_error_message "Invalid compose file specified. Please choose one of: media, starrs, network, management."
                ;;
        esac
    fi
    echo "Fly-Hi is starting. Wait 1 min until all the services are up and running..."
    exit 0
fi
if [ $option == "stop" ]; then
    if [ -z "$compose_file" ]; then
        $dc_media stop
        $dc_starrs stop
        $dc_network stop
        $dc_management stop
    else
        case $compose_file in

            "media")
                $dc_media stop
                ;;
            "starrs")
                $dc_starrs stop
                ;;
            "network")
                $dc_network stop
                ;;
            "management")
                $dc_management stop
                ;;
            "$compose_file")
                docker stop $compose_file
                ;;
            *)
                send_error_message "Invalid compose file specified. Please choose one of: media, starrs, network, management."
                ;;
        esac
    fi
    exit 0
fi
if [ $option == "start" ]; then
    if [ -z "$compose_file" ]; then
        $dc_management up -d
        $dc_network up -d
        $dc_media up -d
        $dc_starrs up -d
    else
        case $compose_file in
            "media")
                $dc_media up -d
                ;;
            "starrs")
                $dc_starrs up -d
                ;;
            "network")
                $dc_network up -d
                ;;
            "management")
                $dc_management up -d
                ;;
            "$compose_file")
                docker start $compose_file
                ;;
            *)
                send_error_message "Invalid compose file specified. Please choose one of: media, starrs, network, management."
                ;;
        esac
    fi
    send_success_message "Fly-Hi is up and running!"
    exit 0
fi
if [ $option == "update" ]; then
    if [ -z "$compose_file" ]; then
        $dc_media pull && $dc_media up -d
        $dc_starrs pull && $dc_starrs up -d
        $dc_network pull && $dc_network up -d
        $dc_management pull && $dc_management up -d
    else
        case $compose_file in
            "media")
                $dc_media pull && $dc_media up -d
                ;;
            "starrs")
                $dc_starrs pull && $dc_starrs up -d
                ;;
            "network")
                $dc_network pull && $dc_network up -d
                ;;
            "management")
                $dc_management pull && $dc_management up -d
                ;;
            *)
                send_error_message "Invalid compose file specified. Please choose one of: media, starrs, network, management."
                ;;
        esac
    fi
    echo "Fly-Hi is updating. Wait 1 min until all the services are up and running..."
    exit 0
fi
if [ $option == "destroy" ]; then
    if [ -z "$compose_file" ]; then
        $dc_media down --remove-orphans
        $dc_starrs down --remove-orphans
        $dc_network down --remove-orphans
        $dc_management down --remove-orphans
    else
        case $compose_file in
            "media")
                $dc_media down --remove-orphans
                ;;
            "starrs")
                $dc_starrs down --remove-orphans
                ;;
            "network")
                $dc_network down --remove-orphans
                ;;
            "management")
                $dc_management down --remove-orphans
                ;;
            "$compose_file")
                docker stop $compose_file && docker rm $compose_file
                ;;
            *)
                send_error_message "Invalid compose file specified. Please choose one of: media, starrs, network, management or a container name."
                ;;
        esac
    fi
    exit 0
fi
if [ $option == "ip" ]; then
    echo "Getting your qBittorrent IP..."
    qbittorrent_ip=$(docker exec qbittorrent sh -c "curl -s ifconfig.me");
    echo "$qbittorrent_ip"
    echo "Your country in qBittorrent is $($dc_starrs exec -it qbittorrent sh -c 'curl -s https://am.i.mullvad.net/country')"
    echo "Your city in qBittorrent is $($dc_starrs exec -it qbittorrent sh -c 'curl -s curl https://am.i.mullvad.net/city')"
    echo
    echo "Getting your IP..."
    your_ip=$(curl -s ifconfig.me)
    echo "$your_ip"
    echo "Your local IP country is $(curl -s https://am.i.mullvad.net/country)"
    echo "Your local IP city is $(curl -s curl https://am.i.mullvad.net/city)"
    echo
    if [ $qbittorrent_ip == $your_ip ]; then
           send_error_message "Your IPs are the same! qBittorrent is NOT working! ⚠️"
   else
           send_success_message "Your IPs are different. qBittorrent is working as expected! ✅ "
    fi
fi

if [ $option == "vpn" ]; then
bash ${install_location}/*install.sh
fi
if [ $option == "noip" ]; then
sudo /usr/local/bin/noip2 -S
fi


if [ $option == "uninstall" ]; then
    read -p "This will uninstall your fly-hi script and remove all container data including the ones not installed with this script, proceed? [n,Y]:" uninstall
    uninstall=${uninstall:-"y"}
    if [ "$uninstall" == "y" ]; then
        read -p "Would you like to also delete container persistant data from your original install location? [N,y]:" delete_persistant
        uninstall=${delete_persistant:-"n"}
        read -p "Would you like to also uninstall and purge your docker installation? [N,y]:" uninstall_docker
        uninstall_docker=${uninstall_docker:-"n"}
        fly-hi destroy media || true
        fly-hi destroy starrs || true
        fly-hi destroy network || true
        fly-hi destroy management || true
        docker network rm fly-hi || true
        sudo docker system prune -a || true
        if [ $option == "delete_persistant" ]; then
            sudo rm -r ${install_location} || true
            send_success_message "You successefully delete your persistant container data!"
        fi
        if [ "$uninstall_docker" == "y" ]; then
            sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli docker-compose-plugin docker* || true
            sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce docker-compose-plugin || true
            sudo umount /var/lib/docker/ || true
            sudo rm -rf /var/lib/docker /etc/docker || true
            sudo rm /etc/apparmor.d/docker || true
            sudo groupdel docker || true
            sudo rm -rf /var/run/docker.sock || true
            sudo rm -rf /usr/bin/docker-compose || true
            sudo rm -rf /usr/local/bin/docker-compose || true
            sudo rm -rf /var/lib/containerd || true
            sudo rm /usr/local/lib/docker/cli-plugins/docker-compose || true
            send_success_message "You are ready for a fresh install of docker!"
        else
            send_success_message "You successefully uninstalled your fly-hi-media and docker!"
        fi
            sudo rm /usr/local/bin/fly-hi
    fi
fi


if [ $option == "links" ]; then
    host_ip=$(hostname -I | awk '{ print $1 }')
    print_link() {
        service_name=$1
        port=$(docker port $service_name 2>/dev/null | awk '{ print $3 }' | head -1 | sed 's/0.0.0.0://' || true)
        if [ -n "$port" ]; then
            printf "\e[34m%-15s\e[0m: \e[94mhttp://%s:%s\e[0m\n" "${service_name^}" "$host_ip" "$port"
        else
            printf "\e[34m%-15s\e[0m: \e[91mNot Running or Not Installed\e[0m\n" "${service_name^}"
        fi
 }
    echo
    echo -e $(printf "\e[34m===== MANAGEMENT =====\e[0m")
    print_link "whoami"
    print_link "portainer"
    print_link "dozzle"
    print_link "heimdall"
    print_link "glances"
    print_link "uptime-kuma"
    print_link "scrutiny"
    print_link "ntfy"
    print_link "phpmyadmin"
    print_link "pgadmin"
    print_link "vaultwarden"
    send_message_in_blue "Cockpit        : http://$host_ip:9090"
    send_message_in_blue "Graylog        : http://$host_ip:$(cat ${install_location}/management/docker-compose.yaml | grep WEB-UI | awk '{ print $2 }' | awk -F":" '{ print $2 }' | awk -F"/" '{ print $1 }')"
    echo
    echo -e $(printf "\e[34m===== NETWORK =====\e[0m")
    send_message_in_blue "Traefik        : http://$host_ip:80/" #traefik#
    send_message_in_blue "Traefik        : http://$host_ip:443/" #traefik#
    send_message_in_blue "Traefik        : http://$host_ip:8880/" #traefik#
    print_link "speedtest"
    print_link "flaresolverr"
    send_message_in_blue "WG-Easy        : http://$host_ip:$(cat ${install_location}/network/docker-compose.yaml | grep WEB | awk '{ print $2 }' | awk -F":" '{ print $2 }' | awk -F"/" '{ print $1 }')"
    echo
    echo -e $(printf "\e[34m===== MEDIA =====\e[0m")
    print_link "jellyfin"
    print_link "emby"
    send_message_in_blue "Plex           : http://$host_ip:$(cat ${install_location}/media/docker-compose.yaml | grep webUI | awk -F":" '{ print $2 }' | awk '{ print $1 }')"
    print_link "jellyseerr"
    print_link "overseerr"
    print_link "ombi"
    print_link "airsonic"
    print_link "calibre"
    print_link "calibre_web"
    print_link "audiobookshelf"
    print_link "tubesync"
    print_link "immich_server"
    print_link "photoprism"
    print_link "nextcloud"
    print_link "linkding"
    print_link "linkwarden"
    print_link "joplin"
    print_link "freshrss"
    print_link "stirling_pdf"
    print_link "filebrowser"
    echo
    echo -e $(printf "\e[34m===== STARRS =====\e[0m")
    send_message_in_blue "qBittorrent    : http://$host_ip:$(cat ${install_location}/network/docker-compose.yaml | grep qbittorrentport | grep -Eo '[0-9]{1,4}' | head -1)/"
    send_message_in_blue "qBittorrentpub : http://$host_ip:$(cat ${install_location}/network/docker-compose.yaml | grep qbittorrentpubport | grep -Eo '[0-9]{1,4}' | head -1)/"
    print_link "radarr"
    print_link "sonarr"
    print_link "lidarr"
    print_link "readarr"
    print_link "prowlarr"
    print_link "bazarr"
    echo
    send_success_message "Use 'fly-hi help' to see how to use the script"
    echo
    send_success_message "Your services can also be reached by "service-name".<my_domain>  (e. g. https://heimdall.<my_domain>)" #traefik#
    echo
    send_success_message "To add or remove clients from your Private VPN Server run 'fly-hi vpn'" #private_vpn#

    send_success_message "To start up Tailscale run 'sudo tailscale up' " #tailscale#
    echo
fi
